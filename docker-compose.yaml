version: "3.9"

services:
  source_postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: source_db
    ports:
      - "5433:5432"
    volumes:
      - ./source_db_init/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - elt_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  target_postgres:
    image: postgres:17
    ports:
      - '5434:5432'
    networks:
      - elt_network
    environment:
      POSTGRES_DB: destination_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  elt_script:
    build:
      context: ./eltscript
      dockerfile: Dockerfile
    command: ["python", "elt_script.py"]
    volumes:
    - ./eltscript:/app
    depends_on:
      source_postgres:
        condition: service_healthy
      target_postgres:
        condition: service_healthy
    networks:
      - elt_network
      
  airflow-init:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    image: custom-airflow
    entrypoint: /bin/bash
    command: -c "airflow db init"
    environment:
      AIRFLOW__CORE__EXECUTOR: airflow.executors.sequential_executor.SequentialExecutor
      AIRFLOW__CORE__FERNET_KEY: 'WzDEtjnyyvvWVvUlfrvMbG_0Llm3E53le-9zxYi61Dc='  # Should not be empty
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
    volumes:
      - airflow_db_volume:/opt/airflow  # Mount for DB file
      - ./airflow/dags:/opt/airflow/dags
      - ./dbt_project:/opt/airflow/dbt
      - ./airflow/.dbt:/home/airflow/.dbt
    networks:
      - elt_network
      - mlflow_network


  airflow-webserver:
    image: custom-airflow
    depends_on:
      - target_postgres
    ports:
      - "8080:8080"
    command: webserver
    mem_limit: 512m
    cpus: 0.5
    environment:
        AIRFLOW__CORE__EXECUTOR: airflow.executors.sequential_executor.SequentialExecutor
        AIRFLOW__CORE__FERNET_KEY: "WzDEtjnyyvvWVvUlfrvMbG_0Llm3E53le-9zxYi61Dc="  # Should not be empty
        AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    volumes:
      - airflow_db_volume:/opt/airflow
      - ./airflow/dags:/opt/airflow/dags
      - ./dbt_project:/opt/airflow/dbt
      - ./airflow/.dbt:/home/airflow/.dbt
    networks:
      - elt_network
      - mlflow_network

  airflow-scheduler:
    image: custom-airflow
    mem_limit: 512m
    cpus: 0.5
    command : scheduler
    environment:
        AIRFLOW__CORE__EXECUTOR: airflow.executors.sequential_executor.SequentialExecutor
        AIRFLOW__CORE__FERNET_KEY: "WzDEtjnyyvvWVvUlfrvMbG_0Llm3E53le-9zxYi61Dc="  # Should not be empty
        AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    depends_on:
      - airflow-webserver    
    volumes:
      - airflow_db_volume:/opt/airflow  # Mount for DB file
      - ./airflow/dags:/opt/airflow/dags
      - ./dbt_project:/opt/airflow/dbt
      - ./airflow/.dbt:/home/airflow/.dbt
    networks:
      - elt_network
      - mlflow_network

networks:
  elt_network:
    driver: bridge
  mlflow_network:
    external: true

volumes:
  airflow_db_volume:

